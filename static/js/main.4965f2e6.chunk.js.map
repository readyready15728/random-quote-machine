{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","RandomQuoteMachine","props","state","text","author","handleNewQuote","bind","handleTweetQuote","fetch","then","response","json","data","setState","catch","error","message","window","open","encodeURIComponent","this","Container","id","className","fluid","Row","Col","xs","Button","block","onClick","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,yMCQrCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,gDACNC,OAAQ,IAGV,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARP,E,8EAWD,IAAD,OACfE,MAAM,yEACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAACV,KAAMS,EAAI,SAAJ,MAA2BR,OAAQQ,EAAI,SAAJ,YACvEE,OAAM,SAACC,GAAD,OAAW,EAAKF,SAAS,CAACV,KAAMY,EAAMC,QAASZ,OAAQ,U,yCAIhEa,OAAOC,KAAK,yDAA2DC,mBAAmB,IAAMC,KAAKlB,MAAMC,KAAO,WAAQiB,KAAKlB,MAAME,QAAS,Y,+BAI9I,OAAO,kBAACiB,EAAA,EAAD,CAAWC,GAAG,YAAYC,UAAU,cAAcC,OAAO,GAC9D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,uBAAGL,GAAG,QAAQF,KAAKlB,MAAMC,QAG7B,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,uBAAGL,GAAG,UAAgC,KAAtBF,KAAKlB,MAAME,OAAgB,GAAK,SAAMgB,KAAKlB,MAAME,UAGrE,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAQN,GAAG,YAAYO,OAAO,EAAMC,QAASV,KAAKf,gBAAlD,cAEF,kBAACqB,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAQN,GAAG,cAAcO,OAAO,EAAMC,QAASV,KAAKb,kBAApD,sB,GAxCuBwB,IAAMC,WAuDxBC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QC9CcW,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.4965f2e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nclass RandomQuoteMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Click \"New Quote\" to get a fresh random quote',\n      author: ''\n    };\n\n    this.handleNewQuote = this.handleNewQuote.bind(this);\n    this.handleTweetQuote = this.handleTweetQuote.bind(this);\n  }\n\n  handleNewQuote() {\n    fetch('http://quotes.rest/quote/random.json?api_key=Ew5V22J4rcwSp2WetHcbXQeF')\n      .then((response) => response.json())\n      .then((data) => this.setState({text: data['contents']['quote'], author: data['contents']['author']}))\n      .catch((error) => this.setState({text: error.message, author: ''}));\n  }\n  \n  handleTweetQuote() {\n    window.open('https://twitter.com/intent/tweet?hashtags=quotes&text=' + encodeURIComponent('\"' + this.state.text + '\" —' + this.state.author), '_blank');\n  }\n\n  render() {\n    return <Container id=\"quote-box\" className=\"text-center\" fluid={true}>\n      <Row>\n        <Col xs=\"12\">\n          <p id=\"text\">{this.state.text}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs=\"12\">\n          <p id=\"author\">{this.state.author === '' ? '' : '—' + this.state.author}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs=\"6\">\n          <Button id=\"new-quote\" block={true} onClick={this.handleNewQuote}>New Quote</Button>\n        </Col>\n        <Col xs=\"6\">\n          <Button id=\"tweet-quote\" block={true} onClick={this.handleTweetQuote}>Tweet Quote</Button>\n        </Col>\n      </Row>\n    </Container>;\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RandomQuoteMachine/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}